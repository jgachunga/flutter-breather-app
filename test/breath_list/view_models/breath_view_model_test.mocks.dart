// Mocks generated by Mockito 5.0.17 from annotations
// in flutter_demo_app/test/breath_list/view_models/breath_view_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter_demo_app/breath_list/data/datasources/breath_data_source.dart'
    as _i2;
import 'package:flutter_demo_app/breath_list/models/breath_history_model.dart'
    as _i3;
import 'package:flutter_demo_app/breath_list/repo/breath_service.dart' as _i4;
import 'package:flutter_demo_app/core/enums/session_state.dart' as _i7;
import 'package:flutter_demo_app/helpers/breath_session_state_updater.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBreathDataSource_0 extends _i1.Fake implements _i2.BreathDataSource {
}

class _FakeBreatheHistory_1 extends _i1.Fake implements _i3.BreatheHistory {}

/// A class which mocks [BreathService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreathService extends _i1.Mock implements _i4.BreathService {
  MockBreathService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BreathDataSource get breathDataSource =>
      (super.noSuchMethod(Invocation.getter(#breathDataSource),
          returnValue: _FakeBreathDataSource_0()) as _i2.BreathDataSource);
  @override
  _i5.Future<_i3.BreatheHistory> add(_i3.BreatheHistory? breatheHistory) =>
      (super.noSuchMethod(Invocation.method(#add, [breatheHistory]),
              returnValue:
                  Future<_i3.BreatheHistory>.value(_FakeBreatheHistory_1()))
          as _i5.Future<_i3.BreatheHistory>);
  @override
  _i5.Future<int> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<List<_i3.BreatheHistory>> list() => (super.noSuchMethod(
          Invocation.method(#list, []),
          returnValue:
              Future<List<_i3.BreatheHistory>>.value(<_i3.BreatheHistory>[]))
      as _i5.Future<List<_i3.BreatheHistory>>);
}

/// A class which mocks [BreathSessionStateUpdater].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreathSessionStateUpdater extends _i1.Mock
    implements _i6.BreathSessionStateUpdater {
  MockBreathSessionStateUpdater() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double getDiameter(_i7.SessionState? state) =>
      (super.noSuchMethod(Invocation.method(#getDiameter, [state]),
          returnValue: 0.0) as double);
  @override
  String getInstructionText(_i7.SessionState? state) =>
      (super.noSuchMethod(Invocation.method(#getInstructionText, [state]),
          returnValue: '') as String);
  @override
  String getCountDownText(_i7.SessionState? state, dynamic countDown) => (super
      .noSuchMethod(Invocation.method(#getCountDownText, [state, countDown]),
          returnValue: '') as String);
  @override
  dynamic nextState(_i7.SessionState? state) =>
      super.noSuchMethod(Invocation.method(#nextState, [state]));
  @override
  dynamic getDisplayText(_i7.SessionState? state) =>
      super.noSuchMethod(Invocation.method(#getDisplayText, [state]));
}

/// A class which mocks [BreathService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreathServiceForTest extends _i1.Mock implements _i4.BreathService {
  @override
  _i2.BreathDataSource get breathDataSource =>
      (super.noSuchMethod(Invocation.getter(#breathDataSource),
          returnValue: _FakeBreathDataSource_0()) as _i2.BreathDataSource);
  @override
  _i5.Future<_i3.BreatheHistory> add(_i3.BreatheHistory? breatheHistory) =>
      (super.noSuchMethod(Invocation.method(#add, [breatheHistory]),
              returnValue:
                  Future<_i3.BreatheHistory>.value(_FakeBreatheHistory_1()))
          as _i5.Future<_i3.BreatheHistory>);
  @override
  _i5.Future<int> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<List<_i3.BreatheHistory>> list() => (super.noSuchMethod(
          Invocation.method(#list, []),
          returnValue:
              Future<List<_i3.BreatheHistory>>.value(<_i3.BreatheHistory>[]))
      as _i5.Future<List<_i3.BreatheHistory>>);
}
